// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCluster = `-- name: CreateCluster :one
INSERT INTO clusters (name, version, provider, region)
VALUES ($1, $2, $3, $4) RETURNING id, name, version, provider, region, created_at, updated_at
`

type CreateClusterParams struct {
	Name     string
	Version  string
	Provider string
	Region   string
}

func (q *Queries) CreateCluster(ctx context.Context, arg CreateClusterParams) (Cluster, error) {
	row := q.db.QueryRow(ctx, createCluster,
		arg.Name,
		arg.Version,
		arg.Provider,
		arg.Region,
	)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.Provider,
		&i.Region,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCluster = `-- name: DeleteCluster :exec
DELETE
FROM clusters
WHERE id = $1
`

func (q *Queries) DeleteCluster(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCluster, id)
	return err
}

const getCluster = `-- name: GetCluster :one
SELECT id, name, version, provider, region, created_at, updated_at
FROM clusters
WHERE id = $1
`

func (q *Queries) GetCluster(ctx context.Context, id pgtype.UUID) (Cluster, error) {
	row := q.db.QueryRow(ctx, getCluster, id)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.Provider,
		&i.Region,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClusters = `-- name: ListClusters :many
SELECT id, name, version, provider, region, created_at, updated_at
FROM clusters
ORDER BY created_at DESC
`

func (q *Queries) ListClusters(ctx context.Context) ([]Cluster, error) {
	rows, err := q.db.Query(ctx, listClusters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cluster
	for rows.Next() {
		var i Cluster
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Version,
			&i.Provider,
			&i.Region,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCluster = `-- name: UpdateCluster :one
UPDATE clusters
SET name       = $2,
    version    = $3,
    provider   = $4,
    region     = $5,
    updated_at = now()
WHERE id = $1 RETURNING id, name, version, provider, region, created_at, updated_at
`

type UpdateClusterParams struct {
	ID       pgtype.UUID
	Name     string
	Version  string
	Provider string
	Region   string
}

func (q *Queries) UpdateCluster(ctx context.Context, arg UpdateClusterParams) (Cluster, error) {
	row := q.db.QueryRow(ctx, updateCluster,
		arg.ID,
		arg.Name,
		arg.Version,
		arg.Provider,
		arg.Region,
	)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.Provider,
		&i.Region,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
