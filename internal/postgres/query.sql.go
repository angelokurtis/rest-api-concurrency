// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createCluster = `-- name: CreateCluster :one
INSERT INTO clusters (name, api_server_url, token)
VALUES ($1, $2, $3)
    RETURNING id, name, api_server_url, token, created_at, updated_at
`

type CreateClusterParams struct {
	Name         string `json:"name"`
	ApiServerUrl string `json:"api_server_url"`
	Token        string `json:"token"`
}

func (q *Queries) CreateCluster(ctx context.Context, arg CreateClusterParams) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, createCluster, arg.Name, arg.ApiServerUrl, arg.Token)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiServerUrl,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCluster = `-- name: DeleteCluster :exec
DELETE FROM clusters WHERE id = $1
`

func (q *Queries) DeleteCluster(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCluster, id)
	return err
}

const getCluster = `-- name: GetCluster :one
SELECT id, name, api_server_url, token, created_at, updated_at FROM clusters WHERE id = $1
`

func (q *Queries) GetCluster(ctx context.Context, id uuid.UUID) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, getCluster, id)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiServerUrl,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClusters = `-- name: ListClusters :many
SELECT id, name, api_server_url, token, created_at, updated_at FROM clusters ORDER BY created_at DESC
`

func (q *Queries) ListClusters(ctx context.Context) ([]Cluster, error) {
	rows, err := q.db.QueryContext(ctx, listClusters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cluster{}
	for rows.Next() {
		var i Cluster
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ApiServerUrl,
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCluster = `-- name: UpdateCluster :one
UPDATE clusters
SET name = $2, api_server_url = $3, token = $4, updated_at = now()
WHERE id = $1
    RETURNING id, name, api_server_url, token, created_at, updated_at
`

type UpdateClusterParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	ApiServerUrl string    `json:"api_server_url"`
	Token        string    `json:"token"`
}

func (q *Queries) UpdateCluster(ctx context.Context, arg UpdateClusterParams) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, updateCluster,
		arg.ID,
		arg.Name,
		arg.ApiServerUrl,
		arg.Token,
	)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiServerUrl,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
